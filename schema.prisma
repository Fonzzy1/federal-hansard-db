generator client {
    provider        = "prisma-client-py"
    previewFeatures = ["views"]
}

datasource db {
    provider = "sqlite"
    url      = "file:/Data/dev.db"
}

model Source {
    id                Int                 @id @default(autoincrement())
    name              String              @unique
    script            String
    file              String
    dateAdded         DateTime            @default(now())
    dateModified      DateTime            @updatedAt
    documents         Document[]
    SourceGroupSource SourceGroupSource[]
    groups            SourceGroup[]       @relation("SourceToSourceGroup")
}

model SourceGroup {
    id                Int                 @id @default(autoincrement())
    name              String              @unique
    dateAdded         DateTime            @default(now())
    dateModified      DateTime            @updatedAt
    SourceGroupSource SourceGroupSource[]
    sources           Source[]            @relation("SourceToSourceGroup")
}

model Author {
    id                Int              @id @default(autoincrement())
    rawName           String           @unique
    dateAdded         DateTime         @default(now())
    dateModified      DateTime         @updatedAt
    parliamentarianId Int?
    parliamentarian   Parliamentarian? @relation(fields: [parliamentarianId], references: [id])
    documents         Document[]
}

model Parliamentarian {
    id           Int       @id @default(autoincrement())
    firstName    String
    lastName     String
    firstNations Boolean
    image        String
    gender       Int
    dob          DateTime?
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
    authorIds    Author[]
    services     Service[]
}

model Service {
    id                Int             @id @default(autoincrement())
    startDate         DateTime
    endDate           DateTime?
    isSenate          Boolean
    seat              String?
    state             String
    dateAdded         DateTime        @default(now())
    dateModified      DateTime        @updatedAt
    parliamentarianId Int
    parliamentId      Int
    partyId           Int
    Parliamentarian   Parliamentarian @relation(fields: [parliamentarianId], references: [id])
    parliament        Parliament      @relation(fields: [parliamentId], references: [id])
    party             Party           @relation(fields: [partyId], references: [id])
}

model Party {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    services Service[]
}

model Parliament {
    id           Int       @id @default(autoincrement())
    firstDate    DateTime
    lastDate     DateTime?
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
    services     Service[]
}

model Document {
    id              Int              @id @default(autoincrement())
    text            String
    date            DateTime
    url             String?
    type            String
    authorId        Int
    sourceId        Int
    dateAdded       DateTime         @default(now())
    dateModified    DateTime         @updatedAt
    claims          Claim[]
    source          Source           @relation(fields: [sourceId], references: [id])
    author          Author           @relation(fields: [authorId], references: [id])
    documentFilters DocumentFilter[]
    citedBy         Document[]       @relation("RelatedDocuments")
    references      Document[]       @relation("RelatedDocuments")
}

model Filter {
    id       Int             @id @default(autoincrement())
    name     String
    versions FilterVersion[]
}

model FilterVersion {
    id              Int              @id @default(autoincrement())
    filterId        Int
    version         String?
    summary         String?
    createdAt       DateTime         @default(now())
    documentFilters DocumentFilter[]
    filter          Filter           @relation(fields: [filterId], references: [id])
}

model DocumentFilter {
    id              Int           @id @default(autoincrement())
    documentId      Int
    filterVersionId Int
    passed          Boolean
    checkedAt       DateTime      @default(now())
    filterVersion   FilterVersion @relation(fields: [filterVersionId], references: [id])
    document        Document      @relation(fields: [documentId], references: [id])

    @@unique([documentId, filterVersionId])
}

model Issue {
    id           Int       @id @default(autoincrement())
    name         String
    dimensionid  Int
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
    dimension    Dimension @relation(fields: [dimensionid], references: [id])
}

model Dimension {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    dateAdded       DateTime         @default(now())
    dateModified    DateTime         @updatedAt
    deconstructions Deconstruction[]
    issues          Issue[]
}

model Infrastructure {
    id                                  Int                                   @id @default(autoincrement())
    name                                String                                @unique
    dateAdded                           DateTime                              @default(now())
    dateModified                        DateTime                              @updatedAt
    deconstructions                     Deconstruction[]
    InfrastructureGroupOnInfrastructure InfrastructureGroupOnInfrastructure[]
    groups                              InfrastructureGroup[]                 @relation("InfraToInfraGroup")
}

model InfrastructureGroup {
    id                                  Int                                   @id @default(autoincrement())
    name                                String                                @unique
    dateAdded                           DateTime                              @default(now())
    dateModified                        DateTime                              @updatedAt
    InfrastructureGroupOnInfrastructure InfrastructureGroupOnInfrastructure[]
    infrastructures                     Infrastructure[]                      @relation("InfraToInfraGroup")
}

model SourceGroupSource {
    sourceId      Int
    sourceGroupId Int
    sourceGroup   SourceGroup @relation(fields: [sourceGroupId], references: [id])
    source        Source      @relation(fields: [sourceId], references: [id])

    @@id([sourceId, sourceGroupId])
}

model InfrastructureGroupOnInfrastructure {
    infrastructureId      Int
    infrastructureGroupId Int
    infrastructureGroup   InfrastructureGroup @relation(fields: [infrastructureGroupId], references: [id])
    infrastructure        Infrastructure      @relation(fields: [infrastructureId], references: [id])

    @@id([infrastructureId, infrastructureGroupId])
}

model Extractor {
    id      Int     @id @default(autoincrement())
    name    String
    details String?
    claims  Claim[]
}

model Deconstructor {
    id              Int              @id @default(autoincrement())
    name            String
    details         String?
    deconstructions Deconstruction[]
}

model Claim {
    id             Int              @id @default(autoincrement())
    text           String
    documentid     Int
    extractorId    Int
    dateAdded      DateTime         @default(now())
    dateModified   DateTime         @updatedAt
    extractor      Extractor        @relation(fields: [extractorId], references: [id])
    document       Document         @relation(fields: [documentid], references: [id])
    deconstruction Deconstruction[]
}

model Deconstruction {
    id               Int            @id @default(autoincrement())
    claimId          Int
    infrastructureId Int
    valence          Int
    dimensionId      Int?
    deconstructorId  Int
    dateAdded        DateTime       @default(now())
    dateModified     DateTime       @updatedAt
    deconstructor    Deconstructor  @relation(fields: [deconstructorId], references: [id])
    Dimension        Dimension?     @relation(fields: [dimensionId], references: [id])
    infrastructure   Infrastructure @relation(fields: [infrastructureId], references: [id])
    claim            Claim          @relation(fields: [claimId], references: [id])

    @@unique([claimId, deconstructorId])
}

view DocumentServiceFilterView {
    documentId          Int       @unique
    documentDate        DateTime
    serviceId           Int
    parliamentId        Int
    parliamentFirstDate DateTime
    parliamentLastDate  DateTime?
    partyId             Int
    partyName           String
    seat                String?
    state               String
    isSenate            Boolean
    parliamentarianId   Int
    firstName           String
    lastName            String
    firstNations        Boolean
    gender              Int
    dob                 DateTime?
}
