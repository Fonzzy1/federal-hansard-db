generator client {
    provider = "prisma-client-py"
}

datasource db {
    provider = "sqlite"
    url      = "file:/Data/dev.db"
}

// Sources have a list of documents
model Source {
    id                Int                 @id @default(autoincrement())
    name              String              @unique
    script            String
    file              String
    documents         Document[]
    groups            SourceGroup[]       @relation("SourceToSourceGroup")
    SourceGroupSource SourceGroupSource[]
    dateAdded         DateTime            @default(now())
    dateModified      DateTime            @updatedAt
}

// Source groups have various Sources that can be accessed together
model SourceGroup {
    id                Int                 @id @default(autoincrement())
    name              String              @unique
    sources           Source[]            @relation("SourceToSourceGroup")
    SourceGroupSource SourceGroupSource[]
    dateAdded         DateTime            @default(now())
    dateModified      DateTime            @updatedAt
}

// Authors have documents -- can be parliamentarians, but also open to them
// being other things -- journalists etc
// There is an expectation that the raw name will be messy AF, and therefore
// will need to be joined cleverly to the parliamentarian class
model Author {
    id                Int              @id @default(autoincrement())
    rawName           String           @unique
    documents         Document[]
    parliamentarian   Parliamentarian? @relation(fields: [parliamentarianId], references: [id])
    dateAdded         DateTime         @default(now())
    dateModified      DateTime         @updatedAt
    parliamentarianId Int?
}

// Single parliamentarian, joins together multiple authors
model Parliamentarian {
    id           Int       @id @default(autoincrement())
    firstName    String
    lastName     String
    firstNations Boolean
    image        String
    gender       Int
    dob          DateTime?
    authorIds    Author[]
    services     Service[]
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
}

// The model to show  a parliamentarian associated with a party and a seat,
// moved away from parliamentarian class since a single member could link to
// multiple parties or seats
model Service {
    id                Int             @id @default(autoincrement())
    party             Party           @relation(fields: [partyId], references: [id])
    startDate         DateTime
    endDate           DateTime?
    isSenate          Boolean
    seat              String?
    state             String
    parliament        Parliament      @relation(fields: [parliamentId], references: [id])
    dateAdded         DateTime        @default(now())
    dateModified      DateTime        @updatedAt
    parliamentarianId Int
    Parliamentarian   Parliamentarian @relation(fields: [parliamentarianId], references: [id])
    parliamentId      Int
    partyId           Int
}

model Party {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    services Service[]
    // governments Parliament[] @relation("GovernmentParty")
    // oppositions Parliament[] @relation("OppositionParty")
}

model Parliament {
    id           Int       @id
    // governmentPartyId Int
    // oppositionPartyId Int
    // governmentParty   Party     @relation("GovernmentParty", fields: [governmentPartyId], references: [id])
    // oppositionParty   Party     @relation("OppositionParty", fields: [oppositionPartyId], references: [id])
    firstDate    DateTime
    // Can be optional for non-ended parliament
    lastDate     DateTime?
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
    services     Service[]
}

model Document {
    id              Int              @id @default(autoincrement())
    text            String
    date            DateTime
    url             String?
    type            String
    author          Author           @relation(fields: [authorId], references: [id])
    authorId        Int
    citedBy         Document[]       @relation("RelatedDocuments")
    references      Document[]       @relation("RelatedDocuments")
    source          Source           @relation(fields: [sourceId], references: [id])
    sourceId        Int
    claims          Claim[]
    dateAdded       DateTime         @default(now())
    dateModified    DateTime         @updatedAt
    documentFilters DocumentFilter[]
}

model Filter {
    id       Int             @id @default(autoincrement())
    name     String // e.g. "LengthFilter", "IsEnglish"
    versions FilterVersion[]
}

model FilterVersion {
    id              Int              @id @default(autoincrement())
    filter          Filter           @relation(fields: [filterId], references: [id])
    filterId        Int
    version         String? // e.g. "v1.2", commit hash
    summary         String?
    createdAt       DateTime         @default(now())
    documentFilters DocumentFilter[]
}

model DocumentFilter {
    id              Int           @id @default(autoincrement())
    document        Document      @relation(fields: [documentId], references: [id])
    documentId      Int
    filterVersion   FilterVersion @relation(fields: [filterVersionId], references: [id])
    filterVersionId Int
    passed          Boolean
    checkedAt       DateTime      @default(now())

    @@unique([documentId, filterVersionId])
}

model Issue {
    id           Int       @id @default(autoincrement())
    name         String
    dimension    Dimension @relation(fields: [dimensionid], references: [id])
    dimensionid  Int
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
}

model Dimension {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    issues          Issue[]
    deconstructions Deconstruction[]
    dateAdded       DateTime         @default(now())
    dateModified    DateTime         @updatedAt
}

model Infrastructure {
    id                                  Int                                   @id @default(autoincrement())
    name                                String                                @unique
    deconstructions                     Deconstruction[]
    groups                              InfrastructureGroup[]                 @relation("InfraToInfraGroup")
    InfrastructureGroupOnInfrastructure InfrastructureGroupOnInfrastructure[]
    dateAdded                           DateTime                              @default(now())
    dateModified                        DateTime                              @updatedAt
}

model InfrastructureGroup {
    id                                  Int                                   @id @default(autoincrement())
    name                                String                                @unique
    infrastructures                     Infrastructure[]                      @relation("InfraToInfraGroup")
    InfrastructureGroupOnInfrastructure InfrastructureGroupOnInfrastructure[]
    dateAdded                           DateTime                              @default(now())
    dateModified                        DateTime                              @updatedAt
}

// For join tables, typically no dateAdded/modified fields are needed unless
// required
model SourceGroupSource {
    sourceId      Int
    sourceGroupId Int
    source        Source      @relation(fields: [sourceId], references: [id])
    sourceGroup   SourceGroup @relation(fields: [sourceGroupId], references: [id])

    @@id([sourceId, sourceGroupId])
}

model InfrastructureGroupOnInfrastructure {
    infrastructureId      Int
    infrastructureGroupId Int
    infrastructure        Infrastructure      @relation(fields: [infrastructureId], references: [id])
    infrastructureGroup   InfrastructureGroup @relation(fields: [infrastructureGroupId], references: [id])

    @@id([infrastructureId, infrastructureGroupId])
}

model Extractor {
    id      Int     @id @default(autoincrement())
    name    String
    details String?
    claims  Claim[]
}

model Deconstructor {
    id              Int              @id @default(autoincrement())
    name            String
    details         String?
    deconstructions Deconstruction[]
}

model Claim {
    id             Int              @id @default(autoincrement())
    text           String
    document       Document         @relation(fields: [documentid], references: [id])
    documentid     Int
    deconstruction Deconstruction[]

    extractor    Extractor @relation(fields: [extractor_id], references: [id])
    extractor_id Int

    dateAdded    DateTime @default(now())
    dateModified DateTime @updatedAt
}

model Deconstruction {
    id               Int            @id @default(autoincrement())
    claim            Claim          @relation(fields: [claimId], references: [id])
    claimId          Int
    infrastructure   Infrastructure @relation(fields: [infrastructureId], references: [id])
    infrastructureId Int

    valence     Int
    Dimension   Dimension? @relation(fields: [dimensionId], references: [id])
    dimensionId Int?

    deconstructor    Deconstructor @relation(fields: [deconstructor_id], references: [id])
    deconstructor_id Int

    dateAdded    DateTime @default(now())
    dateModified DateTime @updatedAt

    @@unique([claimId, deconstructor_id])
}
