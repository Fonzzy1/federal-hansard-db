generator client {
    provider        = "prisma-client-py"
    previewFeatures = ["views"]
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

///  Sources 
// To get the data - run the the scrape script with the inFile to produce the
// outFile. Then use the script file with the argyment of the outFile to get it
// into the database. 
model Source {
    id            Int           @id @default(autoincrement())
    name          String        @unique
    parserModule  String
    scraperModule String
    args          String
    dateAdded     DateTime      @default(now())
    dateModified  DateTime      @updatedAt
    rawDocuments  RawDocument[]
    groups        SourceGroup[] @relation("SourceToSourceGroup")
}

model RawDocument {
    id           Int        @id @default(autoincrement())
    name         String
    text         String
    source       Source     @relation(fields: [sourceId], references: [id])
    dateAdded    DateTime   @default(now())
    dateModified DateTime   @updatedAt
    sourceId     Int
    documents    Document[]

    @@unique([name, sourceId])
}

model SourceGroup {
    id           Int      @id @default(autoincrement())
    name         String   @unique
    dateAdded    DateTime @default(now())
    dateModified DateTime @updatedAt
    sources      Source[] @relation("SourceToSourceGroup")
}

model Parliamentarian {
    id           String      @id
    altId        String[]
    firstName    String
    lastName     String
    altName      String?
    middleNames  String?
    firstNations Boolean
    image        String
    gender       Int
    dob          DateTime?
    dateAdded    DateTime    @default(now())
    dateModified DateTime    @updatedAt
    services     Service[]
    rawAuthors   rawAuthor[]
}

model Service {
    id                Int             @id @default(autoincrement())
    startDate         DateTime
    endDate           DateTime?
    isSenate          Boolean
    seat              String?
    state             String
    dateAdded         DateTime        @default(now())
    dateModified      DateTime        @updatedAt
    parliamentarianId String
    parliamentId      Int
    partyId           Int
    Parliamentarian   Parliamentarian @relation(fields: [parliamentarianId], references: [id])
    parliament        Parliament      @relation(fields: [parliamentId], references: [id])
    party             Party           @relation(fields: [partyId], references: [id])
}

model Party {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    services Service[]
}

model Parliament {
    id           Int       @id @default(autoincrement())
    firstDate    DateTime
    lastDate     DateTime?
    dateAdded    DateTime  @default(now())
    dateModified DateTime  @updatedAt
    services     Service[]
}

model rawAuthor {
    id                Int              @id @default(autoincrement())
    name              String           @unique
    dateAdded         DateTime         @default(now())
    dateModified      DateTime         @updatedAt
    parliamentarian   Parliamentarian? @relation(fields: [parliamentarianId], references: [id])
    parliamentarianId String?
    Document          Document[]
}

model Document {
    id            Int         @id @default(autoincrement())
    text          String
    date          DateTime
    url           String?
    type          String
    rawAuthor     rawAuthor   @relation(fields: [rawAuthorId], references: [id])
    rawDocumentId Int
    dateAdded     DateTime    @default(now())
    dateModified  DateTime    @updatedAt
    rawDocument   RawDocument @relation(fields: [rawDocumentId], references: [id])
    citedBy       Document[]  @relation("RelatedDocuments")
    references    Document[]  @relation("RelatedDocuments")
    rawAuthorId   Int
}
